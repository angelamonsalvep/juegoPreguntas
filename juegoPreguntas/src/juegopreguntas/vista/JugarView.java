/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package juegopreguntas.vista;

import com.mysql.jdbc.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import juegopreguntas.conexion.Conexion;
import juegopreguntas.model.Categoria;
import juegopreguntas.model.Pregunta;
import juegopreguntas.model.Respuesta;
import juegopreguntas.model.Ronda;

/**
 *
 * @author Angelita
 */
public class JugarView extends javax.swing.JFrame {

    private int contRondas=0;
    /**
     * Creates new form JugarView
     */
    public JugarView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_opciones = new javax.swing.ButtonGroup();
        jl_descripcionRonda = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jl_premio = new javax.swing.JLabel();
        jl_desc_preg = new javax.swing.JLabel();
        jl_desc_categoria = new javax.swing.JLabel();
        jrb_opcion1 = new javax.swing.JRadioButton();
        jrb_opcion2 = new javax.swing.JRadioButton();
        jrb_opcion3 = new javax.swing.JRadioButton();
        jrb_opcion4 = new javax.swing.JRadioButton();
        jb_validarRespuesta = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(350, 100));
        setResizable(false);

        jl_descripcionRonda.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jl_descripcionRonda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_descripcionRonda.setText("DESCRIPCIÓN RONDA");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("PREMIO: ");

        jl_premio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jl_premio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_premio.setText("$VALOR PREMIO");

        jl_desc_preg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jl_desc_preg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_desc_preg.setText("Descripción Pregunta.....");
        jl_desc_preg.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jl_desc_categoria.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jl_desc_categoria.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_desc_categoria.setText("Descripción de la categoria...");

        bg_opciones.add(jrb_opcion1);
        jrb_opcion1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jrb_opcion1.setText("Opción de respuesta 1....");

        bg_opciones.add(jrb_opcion2);
        jrb_opcion2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jrb_opcion2.setText("Opción de respuesta 2.....");
        jrb_opcion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_opcion2ActionPerformed(evt);
            }
        });

        bg_opciones.add(jrb_opcion3);
        jrb_opcion3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jrb_opcion3.setText("Opción de respuesta 3.....");

        bg_opciones.add(jrb_opcion4);
        jrb_opcion4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jrb_opcion4.setText("Opción de respuesta 4....");
        jrb_opcion4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_opcion4ActionPerformed(evt);
            }
        });

        jb_validarRespuesta.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jb_validarRespuesta.setText("VALIDAR RESPUESTA");
        jb_validarRespuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_validarRespuestaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("(Pregunta)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jl_descripcionRonda, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jl_premio))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jrb_opcion1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jrb_opcion2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jrb_opcion3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jrb_opcion4, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(116, 116, 116))
                            .addComponent(jl_desc_preg, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(jl_desc_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(jb_validarRespuesta))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(jLabel1)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jl_descripcionRonda)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jl_premio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_desc_preg, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_desc_categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jrb_opcion1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb_opcion2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb_opcion3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jrb_opcion4)
                .addGap(32, 32, 32)
                .addComponent(jb_validarRespuesta)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrb_opcion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_opcion2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrb_opcion2ActionPerformed

    private void jrb_opcion4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_opcion4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrb_opcion4ActionPerformed

    private void jb_validarRespuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_validarRespuestaActionPerformed
        // TODO add your handling code here:
        validarRespuesta();
    }//GEN-LAST:event_jb_validarRespuestaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JugarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JugarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JugarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JugarView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JugarView().setVisible(true);
            }
        });
    }
    
    /*--------------------------------------------------------------
    función para llenar jlabels con los datos de cada objeto tipo ronda, las cuales se
    obtienen de la base de datos
    ----------------------------------------------------------------*/
    public void llenarJLRondas(int contRonda){
        
        Ronda ronda = new Ronda();
        ArrayList<Ronda> listRondas = new ArrayList<>();
        listRondas = consultarRondas();
        jl_descripcionRonda.setText(listRondas.get(contRonda).getDescripcion());
        jl_premio.setText("$ " + String.valueOf(listRondas.get(contRonda).getPremio()));
        seleccionarPreguntaAleatoria(consultarPreguntasByCategoria());
        llenarJRBRespuestas();
        
        
        
    }
    
    
    /*--------------------------------------------------------------
    función que retorna una lista de objetos de tipo Ronda, los cuales
    se obtienen de la base de datos, por medio de una consulta SQL.
    --------------------------------------------------------------*/
    public ArrayList<Ronda> consultarRondas(){
        
        ArrayList<Ronda> listRondas = new ArrayList<>();
        try{
            Conexion conecta = new Conexion();
            Connection con = (Connection) conecta.getConexion();
            
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM ronda;");
            
            int i=0;
            while(rs.next())  {
                Ronda ronda = new Ronda();
                ronda.setId(Integer.parseInt(rs.getString(1)));
                System.out.println("id_ronda:  " + ronda.getId());
                ronda.setDescripcion(rs.getString(2));
                System.out.println("descripción_ronda: " + ronda.getDescripcion());
                ronda.setPremio(Integer.parseInt(rs.getString(3)));
                System.out.println("premio:  " + ronda.getPremio());
                i=i+1;
                listRondas.add(ronda);
            }
            con.close();
                        
        } catch (Exception e){
            System.out.println(e);            
        }
        
        return listRondas;
    }
    
     /*--------------------------------------------------------------
    función que recibe un entero y  retorna un boolean 
    true si es 1
    false si es 0
    --------------------------------------------------------------*/
    public boolean integerToBoolean(int estado) {
        boolean bool;
        if(estado == 1){
            bool= true;
        }else {
            bool = false;
        }
        return bool;
    }
    
    
        /*--------------------------------------------------------------
    función que selecciona por medio de la generacion de un número aleatorio,
    un item de la lista de preguntas que se recibe como parametro
    --------------------------------------------------------------*/
    private void seleccionarPreguntaAleatoria(ArrayList<Pregunta> listaPreguntas) {
        
       
        Random r = new Random();
        int numeroAleatorio = r.nextInt(listaPreguntas.size());  // Entre 0 y 5, más 1.
        System.out.println("numero aleatorio: " + numeroAleatorio);
        
        jl_desc_preg.setText(listaPreguntas.get(numeroAleatorio).getDescripcion());
        
    }
    
    /*--------------------------------------------------------------
    función para mostrar en jlabel la descripción de la categoria correspondiente a 
    la pregunta seleccionada, la cual se obtiene de la base de datos.
    ----------------------------------------------------------------*/
    public void llenarJLCategoria(int contRonda){
        ArrayList<Categoria> listCategorias;
        listCategorias = new RegistrarPreguntaView().consultarCategorias();
       
        jl_desc_categoria.setText("( Nivel de dificultad: " + listCategorias.get(contRondas).getNivelDificultad()+ " )");
    }
    
    /*--------------------------------------------------------------
    función para mostrar en los jRadioButton, la descripción de las opciones de respuesta
    correspondientes a la pregunta seleccionada, las cuales se obtienen de la base de datos.
    ----------------------------------------------------------------*/
    public void llenarJRBRespuestas(){
        ArrayList<Respuesta> listRespuestas;
        int id_pregunta=   new RegistrarRespuestasView().consultarPreguntaByDescripcion(jl_desc_preg.getText());
        System.out.println("id_pregunta....:  " + id_pregunta);
        listRespuestas = consultarRespuestasByIdPregunta(id_pregunta);
        System.out.println("size listRespuestas: " + listRespuestas.size());
        int[] arreglo = {0, 1, 2, 3};
        //Fisher-Yates shuffle:
        int[] shuffled = fisher_yates(arreglo);
        
        jrb_opcion1.setText(listRespuestas.get(shuffled[0]).getDescripcion());
        jrb_opcion2.setText(listRespuestas.get(shuffled[1]).getDescripcion());
        jrb_opcion3.setText(listRespuestas.get(shuffled[2]).getDescripcion());
        jrb_opcion4.setText(listRespuestas.get(shuffled[3]).getDescripcion());
        
    }
    
    
    /*Función de barajamiento usando el algoritmo Fisher Yates
    Se recibe un arreglo de enteros (ordenado o no) y se aplica
    el algoritmo de Fisher - Yates.
    Se devuelve un arreglo de enteros desordenado aleatoriamente
     */
    private static int[] fisher_yates(int[] arreglo) {
      // recorremos todo el arreglo
      for(int i = arreglo.length - 1; i > 0; i--) {
        // calculamos un índice aleatorio dentro del rango permitido
        int shuffled_index = (int)Math.floor(Math.random() * (i + 1));
        //guardamos el elemento que estamos iterando
        int tmp = arreglo[i];
        // asignamos el elemento aleatorio al índice iterado
        arreglo[i] = arreglo[shuffled_index];
        // asignamos el elemento iterado al índice aleatorio
        arreglo[shuffled_index] = tmp;
      }
      return arreglo;
    }
    
    
    /*--------------------------------------------------------------
    función que retorna un String con el valor de la propiedad getText del 
    JRadioButton seleccionado dentro de un GroupButton
    
    --------------------------------------------------------------*/
    public String getSelectedButtonText(ButtonGroup buttonGroup) { 
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) { 
            AbstractButton button = buttons.nextElement(); 
            if (button.isSelected()) { 
                return button.getText(); 
            } 
        } 
        return null; 
    }

    
    
    
        /*--------------------------------------------------------------
    función que valida la respuesta seleccionada por el jugador.
    --------------------------------------------------------------*/
    public void validarRespuesta(){
        
        ValidacionRespuestaView validacionRespuestaView = new ValidacionRespuestaView();
        
        String descRespuestaSel = getSelectedButtonText(bg_opciones);
        System.out.println("desc_respuesta: " + descRespuestaSel);
        int estadoRespuesta= consultarEstadoRespuestaByDescripcion(descRespuestaSel);
        
        if(estadoRespuesta == 1){
            contRondas++;
            validacionRespuestaView.jl_validacion.setText("Correcta");
        } else {
            validacionRespuestaView.jl_validacion.setText("Incorrecta");
        }
        validacionRespuestaView.setVisible(true);
        
    }
    
        /*--------------------------------------------------------------
    función que retorna el estado de la respuesta seleccionada por el jugador, este id
    se obtiene de la base de datos, por medio de una consulta SQL.
    --------------------------------------------------------------*/
    public int consultarEstadoRespuestaByDescripcion(String desc_Respuesta){
        
        int estadoRespuesta =0;
        System.out.println("desc_respuesta: ... " + desc_Respuesta);
        try{
            Conexion conecta = new Conexion();
            Connection con = (Connection) conecta.getConexion();
            
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT `respuesta`.`estado_resp`" +
                                        "FROM `respuesta` "
                                        + "WHERE respuesta.descripcion_resp like '"+ desc_Respuesta +"';");
            
            
           while(rs.next()){
               estadoRespuesta= Integer.parseInt(rs.getString(1));
                System.out.println("estado_resp.....:  " + rs.getString(1));
           }
                
                        
        } catch (Exception e){
            System.out.println(e);            
        }
        
        return estadoRespuesta;
    }
    
    
        /*--------------------------------------------------------------
    función que retorna una lista de objetos tipo Pregunta, estos datos
    se obtienen de la base de datos, por medio de una consulta SQL.
    --------------------------------------------------------------*/
    private ArrayList<Pregunta> consultarPreguntasByCategoria(){
        
            ArrayList<Pregunta> listPreguntas = new ArrayList<>();
        try{
            Conexion conecta = new Conexion();
            Connection con = (Connection) conecta.getConexion();
            
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT `pregunta`.`id_preg`, `pregunta`.`descripcion_preg` " +
                                        "FROM `pregunta` "
                                        + "WHERE pregunta.id_cate_preg = "+ contRondas+1 +";");
            
            int i=0;
            while(rs.next())  {
                Pregunta pregunta = new Pregunta();
                pregunta.setId(Integer.parseInt(rs.getString(1)));
                System.out.println("id_preg:  " + pregunta.getId());
                pregunta.setDescripcion(rs.getString(2));
                System.out.println("descripción_preg: " + pregunta.getDescripcion());
                i=i+1;
                listPreguntas.add(pregunta);
            }
                        
        } catch (Exception e){
            System.out.println(e);            
        }
        
        return listPreguntas;
    }
    
    /*--------------------------------------------------------------
    función que retorna una lista con las respuestas correspondientes a la 
    pregunta seleccionada, estos datos se obtienen de la base de datos, 
    por medio de una consulta SQL.
    --------------------------------------------------------------*/
    private ArrayList<Respuesta> consultarRespuestasByIdPregunta(int idPregunta){
        
        ArrayList<Respuesta> listRespuestas = new ArrayList<>();
        System.out.println("se imprime id preguntas: " + idPregunta);
            
        try{
            Conexion conecta = new Conexion();
            Connection con = (Connection) conecta.getConexion();
            
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT `respuesta`.`id_resp`, `respuesta`.`descripcion_resp`, `respuesta`.`estado_resp` " +
                                        "FROM `respuesta` "
                                        + "WHERE respuesta.id_preg_resp = "+ idPregunta +";");
            
            int i=0;
            while(rs.next())  {
                Respuesta respuesta  = new Respuesta();
                respuesta.setId(Integer.parseInt(rs.getString(1)));
                System.out.println("id_preg:  " + respuesta.getId());
                respuesta.setDescripcion(rs.getString(2));
                System.out.println("descripción_preg: " + respuesta.getDescripcion());
                respuesta.setEstado(integerToBoolean(Integer.parseInt(rs.getString(3))));
                System.out.println("estado_resp: " + integerToBoolean(Integer.parseInt(rs.getString(3))));
                i=i+1;
                listRespuestas.add(respuesta);
            }
                        
        } catch (Exception e){
            System.out.println(e);            
        }
        
        return listRespuestas;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_opciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jb_validarRespuesta;
    private javax.swing.JLabel jl_desc_categoria;
    private javax.swing.JLabel jl_desc_preg;
    private javax.swing.JLabel jl_descripcionRonda;
    private javax.swing.JLabel jl_premio;
    private javax.swing.JRadioButton jrb_opcion1;
    private javax.swing.JRadioButton jrb_opcion2;
    private javax.swing.JRadioButton jrb_opcion3;
    private javax.swing.JRadioButton jrb_opcion4;
    // End of variables declaration//GEN-END:variables
}
